###############################################
# General settings
###############################################
#export EDITOR=nano
export LD_LIBRARY_PATH="/usr/X11R6/lib:"$LD_LIBRARY_PATH

###############################################
# Perforce
###############################################
export P4CLIENT=$USER
export P4PORT=perforce.athenahealth.com:1666
export P4_HOME=/home/$USER/p4

# If using perforce in windows, uncomment this line
# export P4WINROOT=z:\\p4

# If not using perforce in windows, uncomment these lines
export P4LOCALROOT=$P4_HOME
export P4WINROOT=$P4_HOME

###############################################
# Athena-specific config
###############################################
export EMAILINTERCEPTADDRESS="$USER@athenahealth.com"
export BARCODEWEBSERVICELOC=http://ars-anetsrv1.corp.athenahealth.com/perl/barcode/ws.pl
export MEMCACHEDPOOL=DEV
export FILEROOT=/home/$USER/fileroot
export REDIRECT_PERL_FILEROOT=1
export WIKI_HOME=/home/$USER/wiki
export PATH="$HOME/bin:$PATH:$P4_HOME/intranet/bin:$P4_HOME/techops/coredev/:$P4_HOME/techops/coredev/bin"

# We should not have two of these, but we do.
# Also they shouldn't need to be Y, but they may.
export ISDEVSERVER='Y'
export ISDEVELOPMENT='Y'

## JUSTIN-SPECIFIC

shopt -s globstar

export JIRAPROJECT='ISMS'
export VERIFY_CODE_OPTIONS="--strict"
export PERL5LIB="$PERL5LIB:$HOME/lib/perl5"

# Override the default ls colors
export LS_COLORS="no=00:fi=00:di=01;34:ln=00;36:pi=40;32:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31:ex=00;32:"

alias pc="perl -MAthena::Lib -c" # test compile of athena file
alias p1="perl -MAthena::Lib -MData::Dumper -MAthena::Util::Database=DBConnect -MAthena::Util::JSON=EncodeJSON" # a perl onliner with athena code
alias myglimpse="aglimpse --build prod --nowiki"
# my $dbh = DBConnect({INSTANCE => "MAINFTR2", SCHEMA => "ATHENA432"});
alias start_worker="nohup perl \$ATHENA_HOME/scripts/app/platform/worker.pl --start --reset --nodaemon 2>&1 >>$HOME/logs/worker_${HOSTNAME:0:6} &"
alias stop_worker="myps | grep worker | awk '{print \$2}' | while read p; do kill -2 \$p; done;"
alias start_scalemonitor="nohup perl \$ATHENA_HOME/scripts/app/platform/scale_monitor.pl --start --nodaemon --config=$HOME/.scalemonitor.conf 2>&1 >>$HOME/logs/scalemonitor_${HOSTNAME:0:6} 2>&1 &"
alias stop_scalemonitor="myps | grep scale_monitor | awk '{print \$2}' | while read p; do kill -2 \$p; done;"
alias ha="harr dev backend feature=\$BUILDNAME"
alias unha="ps -eo args | grep $USER | grep httpd | cut -d. -f1 | cut -d\/ -f6 | uniq | xargs unharr"
alias python3="/home/akopp/local/bin/python3"
alias start_sublime_server="python3 /home/akopp/DevDaemon/devdaemon.py start"
alias goscribe="cd /mnt/weblogs/scribe/import_arbiter_error_reporting/"
alias tap_test="$ATHENA_HOME/../athenax/release/athenax perl-test "
alias tests_needed='perl -MAthena::Lib -MAthena::Util::Database -MSubmitFiles -E'\''@files = `p4 opened`; s/#.*\n// foreach @files; *SubmitFiles::_MaybeTimePrompt = sub{}; SubmitFiles::CheckTestFiles({FILESTOCHECK => \@files})'\'

function most_used_no_critic {
	myglimpse "no critic " | perl -nE'next unless ($ws = /no critic (.+)$/); $ws = $1; while ($ws =~ /(?:[A-Z][\w:]+::)?([A-Z][\w]+)/g) {say $1}' | sort | uniq -c | sort -rn
}

## see the OO inheritance of Athena-style objects
function perl_oo_structure {
    find . -name "*.pm" -print \
    | grep -v _Test.pm \
    | xargs perl -0777 -nE'
        if(($p) = /^package (.*);/) {
         say $p;
         if (($e) = /EXTENDS => '\''(.*)'\''/) {
          say "\textends $e"
         }
        }'
}

function remove_files_from_out {
	#perl -i -ne'print unless /\.(js|rb|whiskers|php|cfm|html|less|css|md|py|ts|pod|xml|cpp|h|rule|txt|map|json|jsx): /' $1
	perl -i -ne'print if /\.(pl|pm|t|esp): /i' $1
}

# this is broken
function stop_server {
	unharr jmcguirefeature
	unharr jmcguireprod
	unharr jmcguirepublicpersistent2

	for pid in $(myps | perl -ane'print $F[1] . " " if $F[10] eq "httpd"')
	do
		kill    $pid
	done
	sleep 2

	for pid in $(myps | perl -ane'print $F[1] . " " if $F[10] eq "httpd"')
	do
		kill -2 $pid
	done
	sleep 2

	for pid in $(myps | perl -ane'print $F[1] . " " if $F[10] eq "httpd"')
	do
		kill -9 $pid
	done
}

function missing_tests {
	ls | perl -nE'chomp; next if /_Test/; $file = $_; s/(\.pm)/_Test.pm/; next if -e; say "$file -- last modified " . scalar localtime `p4 fstat -T headModTime $file | cut -d\\  -f3`'
}

function get_a_file {
	# rough idea of a function to return a file from FileRoot, given a username, database, and filename
	p1 -Mstrict -MFileRoot -E'my $dbh = DBConnect({INSTANCE => "MTEST71", SCHEMA => "ATHENA15730"});; my $filecontents = FileRoot::GetContentsOfFile($dbh,{FILENAME => "CHARTALERT67.precsv", TYPE => "imports"}); say $filecontents;';
}

# given the output of "sql> desc tablename", turn it into a hash for an import GetSpecs
function turn_sql_desc_to_spec {
	perl -w -Mstrict -nE'
		my ($name, $type, $pre, $notnull) = /^\| (\w+)\s*\| (\w+)\s*\| \s*([\d.]+)\s*\| (\w*).*?\| $/x; 
		next unless $name;
		next if $name =~ /^(CREATED|DELETED|LASTMODIFIED)/;
		next if $name eq "ID";
		my %r;
		$r{NAME} = q{"} . $name . q{"};
		$r{DISPLAYNAME} = q{"} . lc $name . q{"};
		$r{DESCRIPTION} = q{"} . "$type/$pre" . q{"};
		$r{CLEANDESCRIPTION} = q{"..."};
		$r{REQUIRED} = 1 if $notnull;
		$r{VALUEARRAYHASH} = q|[ { Y => "Yes" }, { N => "No" } ]| if $name =~ /YN$/;
		say "{\n\t" . join("\n\t", grep {$_} map{$r{$_} and "$_ => $r{$_},"} qw{NAME DISPLAYNAME DESCRIPTION CLEANDESCRIPTION REQUIRED VALUEARRAYHASH}) . "\n},";
	' $1
}

# switch branch to the given branch in ISMS
# e.g. sb misc_bugs
function scode {
	switch_branch --switch code --to //depot/anet/features/isms/$1/...
	branch code
}
function sreview {
	switch_branch --switch review --to //depot/anet/features/isms/$1/...
	branch review
}

# what I really want from org_chart
function org {
	org_chart --fullname $1 --up | tac | head -n -1
	normal=`org_chart --fullname --depth 1 $1`
	person=`echo "$normal" | head -1`
	echo -e "\e[1m$person\e[0m"
	echo "$normal" | tail -n +2
}

# see what i have running in every server
function whats_running_on_every_server {
	for server in {00..18}; do ssh -t dev1$server 'ps fux'; done
}

function db {
	export MASTER_ROOT_INSTANCE=$1
}


# these must be last
source ~/.bashrc
source ~/bin/.jump.sh
#branch prod
#export MASTER_ROOT_INSTANCE=PTEST1
